[
  {
    "id": 1,
    "title": "Why I Decided to Learn Programming as a Healthcare Professional",
    "slug": "why-i-decided-to-learn-programming",
    "date": "2024-01-15",
    "excerpt": "After years in healthcare, I realized that technology could help me solve problems I encountered daily. Here's why I made the leap into programming.",
    "content": "# Why I Decided to Learn Programming as a Healthcare Professional\n\nAfter working as a clinician for over five years, I found myself constantly frustrated by inefficient systems, outdated software, and processes that seemed designed to slow down patient care rather than enhance it. It was during a particularly challenging shift in the emergency department that I had my \"aha\" moment.\n\n## The Breaking Point\n\nI was trying to access a patient's medical history from three different systems, each with its own login, interface, and way of displaying information. The patient was in distress, and I was spending more time fighting with technology than focusing on their care. That's when I realized: **someone built these systems, and that someone could be me.**\n\n## The Healthcare Technology Gap\n\nHealthcare is one of the most important industries in our society, yet it's often the last to adopt modern technology practices. We have:\n\n- Electronic health records that are clunky and user-unfriendly\n- Communication systems that don't integrate with each other\n- Data that's trapped in silos, preventing comprehensive patient care\n- Workflows that haven't been optimized for decades\n\n## My Programming Journey Begins\n\nI started with Python because of its reputation for being beginner-friendly and its strong presence in data science and healthcare applications. My first program was a simple script to calculate medication dosages based on patient weight and age.\n\n```python\n# My first useful program\ndef calculate_dosage(weight_kg, age_years, medication):\n    if medication == 'acetaminophen':\n        return weight_kg * 15  # mg/kg\n    elif medication == 'ibuprofen':\n        return weight_kg * 10  # mg/kg\n    return 0\n```\n\n## The Learning Curve\n\nLearning to code as a healthcare professional has unique challenges:\n\n1. **Time Management**: Balancing shift work with learning\n2. **Different Mindset**: Moving from clinical thinking to logical problem-solving\n3. **Imposter Syndrome**: Feeling like I'm starting over professionally\n\n## Looking Forward\n\nMy goal is to bridge the gap between healthcare and technology. I want to create tools that actually help clinicians provide better care, not hinder them. Whether that's through developing better EHR interfaces, creating clinical decision support tools, or building communication platforms that actually work.\n\n*The journey from clinician to creator is just beginning, and I'm excited to share what I learn along the way.*"
  },
  {
    "id": 2,
    "title": "My First Month Learning JavaScript: A Clinician's Perspective",
    "slug": "first-month-learning-javascript",
    "date": "2024-01-22",
    "excerpt": "One month into learning JavaScript, I'm discovering how programming concepts relate to clinical thinking. Here's what I've learned so far.",
    "content": "# My First Month Learning JavaScript: A Clinician's Perspective\n\nIt's been exactly one month since I wrote my first `console.log(\"Hello, World!\")` and I'm amazed at how much I've learned. More importantly, I'm starting to see connections between programming and the clinical thinking I've developed over the years.\n\n## The Parallels Between Medicine and Programming\n\n### 1. Problem-Solving Methodology\n\nIn medicine, we follow a systematic approach:\n1. **History taking** (gathering information)\n2. **Physical examination** (observing the system)\n3. **Differential diagnosis** (considering multiple possibilities)\n4. **Testing** (gathering more data)\n5. **Treatment** (implementing a solution)\n\nIn programming, the process is remarkably similar:\n1. **Understanding the problem** (requirements gathering)\n2. **Planning the solution** (algorithm design)\n3. **Writing the code** (implementation)\n4. **Testing** (debugging and validation)\n5. **Deployment** (putting it into production)\n\n### 2. Debugging vs. Diagnosis\n\nWhen a patient presents with symptoms, I don't immediately jump to conclusions. I gather more information, run tests, and systematically rule out possibilities. Debugging code feels exactly the same way.\n\n```javascript\n// When something isn't working, I ask:\n// 1. What should this function return?\n// 2. What is it actually returning?\n// 3. Where is the disconnect?\n\nfunction calculatePatientRisk(age, comorbidities) {\n    console.log('Age:', age); // Gathering information\n    console.log('Comorbidities:', comorbidities); // More data\n    \n    let riskScore = 0;\n    if (age > 65) riskScore += 2;\n    if (comorbidities.includes('diabetes')) riskScore += 1;\n    if (comorbidities.includes('hypertension')) riskScore += 1;\n    \n    console.log('Risk Score:', riskScore); // Checking my work\n    return riskScore;\n}\n```\n\n## The Learning Challenges\n\n### 1. Syntax vs. Semantics\n\nIn medicine, I know that \"chest pain\" can mean many different things depending on the context. In JavaScript, I'm learning that the same concept applies to code. A function can be written many different ways, but the key is understanding what it's supposed to do.\n\n### 2. The Documentation Problem\n\nMedical literature can be dense and hard to navigate. JavaScript documentation feels the same way initially, but I'm learning to read it like I read medical journals - start with the abstract (summary), then dive into the details.\n\n### 3. Imposter Syndrome\n\nI've been a confident clinician for years, but starting over in programming makes me feel like a first-year medical student again. The difference is that now I know this feeling is temporary and part of the learning process.\n\n## What I've Built So Far\n\n### 1. Patient Triage Simulator\n\n```javascript\nclass Patient {\n    constructor(name, age, symptoms, vitalSigns) {\n        this.name = name;\n        this.age = age;\n        this.symptoms = symptoms;\n        this.vitalSigns = vitalSigns;\n        this.priority = this.calculatePriority();\n    }\n    \n    calculatePriority() {\n        let score = 0;\n        \n        // Age factor\n        if (this.age > 65 || this.age < 2) score += 2;\n        \n        // Vital signs\n        if (this.vitalSigns.bloodPressure > 180) score += 3;\n        if (this.vitalSigns.heartRate > 120) score += 2;\n        \n        // Symptoms\n        if (this.symptoms.includes('chest pain')) score += 4;\n        if (this.symptoms.includes('difficulty breathing')) score += 3;\n        \n        return score > 5 ? 'High' : score > 2 ? 'Medium' : 'Low';\n    }\n}\n```\n\n### 2. Medication Interaction Checker\n\n```javascript\nconst drugInteractions = {\n    'warfarin': ['aspirin', 'ibuprofen'],\n    'digoxin': ['furosemide'],\n    'metformin': ['alcohol']\n};\n\nfunction checkInteractions(medications) {\n    const interactions = [];\n    \n    for (let i = 0; i < medications.length; i++) {\n        for (let j = i + 1; j < medications.length; j++) {\n            const med1 = medications[i].toLowerCase();\n            const med2 = medications[j].toLowerCase();\n            \n            if (drugInteractions[med1]?.includes(med2) || \n                drugInteractions[med2]?.includes(med1)) {\n                interactions.push(`${med1} and ${med2} may interact`);\n            }\n        }\n    }\n    \n    return interactions;\n}\n```\n\n## The Next Month\n\nI'm planning to dive deeper into:\n- **DOM manipulation** (making things actually appear on screen)\n- **Event handling** (responding to user interactions)\n- **APIs** (connecting to external data sources)\n- **Async programming** (handling things that take time)\n\n## Key Takeaways\n\n1. **Start with problems you understand**: Building healthcare-related projects makes the learning more relevant\n2. **Embrace the debugging process**: It's just like differential diagnosis\n3. **Document everything**: Just like keeping good medical records\n4. **Practice regularly**: Consistency is key, just like maintaining clinical skills\n\n*Next month, I'll be exploring how to build actual web applications that could be useful in a clinical setting. Stay tuned!*"
  },
  {
    "id": 3,
    "title": "Building My First Web Application: A Clinical Decision Support Tool",
    "slug": "building-first-web-application",
    "date": "2024-01-29",
    "excerpt": "I built my first real web application - a clinical decision support tool for medication dosing. Here's what I learned and how it works.",
    "content": "# Building My First Web Application: A Clinical Decision Support Tool\n\nAfter two months of learning JavaScript, I finally built something that could actually be useful in a clinical setting. It's not going to replace any major medical software, but it's a start, and more importantly, it's mine.\n\n## The Problem I Wanted to Solve\n\nEvery day in the hospital, I see clinicians (including myself) reaching for calculators, reference books, or mobile apps to calculate medication dosages. The process is:\n\n1. Look up the patient's weight\n2. Find the medication in a reference\n3. Calculate the dose based on weight\n4. Check for any adjustments needed (age, kidney function, etc.)\n5. Double-check the math\n\nThis process is error-prone and time-consuming, especially during busy shifts.\n\n## The Solution: A Simple Web App\n\nI decided to build a web application that would:\n- Calculate common medication dosages automatically\n- Include safety checks and warnings\n- Be accessible from any device with a web browser\n- Work offline (no internet required in the hospital)\n\n## The Technical Implementation\n\n### HTML Structure\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Clinical Dosing Calculator</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Clinical Dosing Calculator</h1>\n        \n        <form id=\"dosing-form\">\n            <div class=\"input-group\">\n                <label for=\"patient-weight\">Patient Weight (kg):</label>\n                <input type=\"number\" id=\"patient-weight\" required>\n            </div>\n            \n            <div class=\"input-group\">\n                <label for=\"medication\">Medication:</label>\n                <select id=\"medication\" required>\n                    <option value=\"\">Select medication</option>\n                    <option value=\"acetaminophen\">Acetaminophen</option>\n                    <option value=\"ibuprofen\">Ibuprofen</option>\n                    <option value=\"morphine\">Morphine</option>\n                </select>\n            </div>\n            \n            <button type=\"submit\">Calculate Dose</button>\n        </form>\n        \n        <div id=\"result\" class=\"result\"></div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n### JavaScript Logic\n\n```javascript\n// Medication database with dosing information\nconst medications = {\n    acetaminophen: {\n        name: 'Acetaminophen',\n        adultDose: 15, // mg/kg\n        maxDose: 1000, // mg per dose\n        maxDaily: 4000, // mg per day\n        warnings: ['Check liver function', 'Avoid in liver disease']\n    },\n    ibuprofen: {\n        name: 'Ibuprofen',\n        adultDose: 10, // mg/kg\n        maxDose: 800, // mg per dose\n        maxDaily: 3200, // mg per day\n        warnings: ['Check kidney function', 'Avoid in GI bleeding']\n    },\n    morphine: {\n        name: 'Morphine',\n        adultDose: 0.1, // mg/kg\n        maxDose: 10, // mg per dose\n        maxDaily: 60, // mg per day\n        warnings: ['Monitor respiratory rate', 'Use with caution in elderly']\n    }\n};\n\n// Calculate the appropriate dose\nfunction calculateDose(weight, medication) {\n    const med = medications[medication];\n    if (!med) return null;\n    \n    const calculatedDose = weight * med.adultDose;\n    const finalDose = Math.min(calculatedDose, med.maxDose);\n    \n    return {\n        medication: med.name,\n        calculatedDose: calculatedDose,\n        finalDose: finalDose,\n        maxDose: med.maxDose,\n        warnings: med.warnings,\n        isMaxDose: calculatedDose > med.maxDose\n    };\n}\n\n// Handle form submission\ndocument.getElementById('dosing-form').addEventListener('submit', function(e) {\n    e.preventDefault();\n    \n    const weight = parseFloat(document.getElementById('patient-weight').value);\n    const medication = document.getElementById('medication').value;\n    \n    if (!weight || !medication) {\n        alert('Please fill in all fields');\n        return;\n    }\n    \n    const result = calculateDose(weight, medication);\n    displayResult(result);\n});\n\n// Display the calculated dose\nfunction displayResult(result) {\n    const resultDiv = document.getElementById('result');\n    \n    if (!result) {\n        resultDiv.innerHTML = '<p class=\"error\">Invalid medication selected</p>';\n        return;\n    }\n    \n    let html = `\n        <div class=\"dose-result\">\n            <h3>Dosing Recommendation</h3>\n            <p><strong>Medication:</strong> ${result.medication}</p>\n            <p><strong>Recommended Dose:</strong> ${result.finalDose.toFixed(1)} mg</p>\n            ${result.isMaxDose ? '<p class=\"warning\">⚠️ Maximum dose reached</p>' : ''}\n            <div class=\"warnings\">\n                <h4>Important Warnings:</h4>\n                <ul>\n                    ${result.warnings.map(warning => `<li>${warning}</li>`).join('')}\n                </ul>\n            </div>\n        </div>\n    `;\n    \n    resultDiv.innerHTML = html;\n};\n```\n\n## The Challenges I Faced\n\n### 1. User Interface Design\n\nI wanted the app to be intuitive for healthcare professionals who might be using it in high-stress situations. This meant:\n- Large, clear buttons\n- Minimal steps to get a result\n- Clear warnings and safety information\n- Mobile-friendly design\n\n### 2. Data Validation\n\nMedical software needs to be extremely reliable. I had to implement:\n- Input validation (no negative weights, reasonable weight ranges)\n- Safety checks (maximum dose limits)\n- Clear error messages\n- Fallback behaviors\n\n### 3. Offline Functionality\n\nHospital WiFi can be unreliable, so I wanted the app to work offline. This required:\n- Self-contained HTML, CSS, and JavaScript files\n- No external dependencies\n- Local storage for any data that needs to persist\n\n## The Results\n\n### What Works Well\n\n1. **Speed**: Calculations are instant\n2. **Accuracy**: No more manual math errors\n3. **Safety**: Built-in warnings and maximum dose limits\n4. **Accessibility**: Works on any device with a web browser\n5. **Simplicity**: Clean, uncluttered interface\n\n### What Needs Improvement\n\n1. **Limited medication database**: Only three medications so far\n2. **No patient history**: Can't track previous doses\n3. **No integration**: Doesn't connect to hospital systems\n4. **Basic UI**: Could be more polished\n\n## The Learning Experience\n\nBuilding this application taught me:\n\n### 1. The Importance of User Research\n\nI interviewed several colleagues about their dosing calculation process. This helped me understand:\n- What information they need most\n- How they currently solve the problem\n- What would make their workflow easier\n\n### 2. The Value of Iterative Development\n\nI built the basic functionality first, then added features one by one:\n- Basic calculation\n- Safety warnings\n- Better UI\n- Input validation\n- Error handling\n\n### 3. The Reality of Software Development\n\nWhat seemed simple in theory became complex in practice:\n- Edge cases I hadn't considered\n- User experience details that matter\n- The importance of testing with real users\n\n## Next Steps\n\nI'm planning to expand this application by:\n\n1. **Adding more medications** to the database\n2. **Implementing age-based dosing** for pediatric patients\n3. **Adding kidney function adjustments** for certain medications\n4. **Creating a mobile app version** using the same logic\n5. **Adding patient history tracking** (with proper privacy considerations)\n\n## The Bigger Picture\n\nThis project showed me that I can build tools that solve real problems in healthcare. It's not about replacing existing systems, but about creating solutions that work better for the people who use them.\n\n*The journey from clinician to creator continues, and I'm excited to see what I'll build next.*"
  }
]

